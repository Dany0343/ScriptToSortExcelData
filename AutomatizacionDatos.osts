{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook) {\n  // En base a texto en columna, dividir el texto para poder procesarlo mejor\n  // Obtener la hoja\n  let hoja = workbook.getWorksheet('YCO96'); // Se pone un nombre arbitrario\n\n  // Se especifica la columna \n  let columna = \"B\";\n  //let columnaBatch = \"A\";\n\n  // Obtener el rango utilizado en la hoja de cálculo\n  let rangoUsado = hoja.getUsedRange();\n\n  // Obtener el número total de filas en el rango utilizado\n  let totalFilas = rangoUsado.getRowCount();\n\n  // Rango dinámico desde la primera celda (A1) hasta la última fila en el rango utilizado\n  let rangoDinamico = hoja.getRange(`${columna}1:${columna}${totalFilas}`);\n  //let rangoDinamicoBatch = hoja.getRange(`${columnaBatch}1:${columnaBatch}${totalFilas}`);\n\n  // Leer los datos en el rango dinámico\n  let datos = rangoDinamico.getValues();\n  //let datosBatch = rangoDinamicoBatch.getValues();\n\n  // Implementación por cada columna y buscarlo con expresiones regulares\n  // Expresión regular para extraer la información necesaria\n  let regex = /(\\d{8})\\s+([\\d,.]+)\\s+KG.*?([\\d,.]+)\\s+KG/;\n  let regexBatch = /Batch Number: (\\d+)/;\n\n  // Crear un objeto para almacenar los datos extraídos\n  let datosExtraidos: { [counter: number]: { article: string, reqWeight: string, actualWeight: string, batch: string, description?: string } } = {};\n\n  // Contador para objeto\n  let counter = 1;\n  let batch: string;\n  // Recorrer todas las filas y extraer los datos\n  for (let i = 0; i < totalFilas; i++) {\n    let fila = String(datos[i][0]);\n    //let batch = String(datosBatch[i][0]);\n\n    // Ejecutar la expresión regular en la fila de datos\n    let resultado = regex.exec(fila);\n    let resultadoBatch = regexBatch.exec(fila)\n\n    if (resultadoBatch) {\n      batch = resultadoBatch[1].substring(1);\n      continue;\n    }\n    else if (resultado) {\n      let article = resultado[1];\n      let reqWeight = resultado[2];\n      let actualWeight = resultado[3];\n\n      // Se mete la descripción de la siguiente celda\n      let description: string;\n      let filaProx = String(datos[i + 1][0])\n      description = filaProx.trim();\n\n      // Agregar los datos extraídos al objeto\n      datosExtraidos[counter] = { article, reqWeight, actualWeight, batch, description };\n\n      // Incrementar el contador\n      counter++;\n    }\n  }\n\n  // Recorrer datosExtraidos para agregar separadores\n  const separador = {\n    article: \"OtraOrfa\",\n    reqWeight: \"OtraOrfa\",\n    actualWeight: \"OtraOrfa\",\n    batch: \"OtraOrfa\",\n    description: \"OtraOrfa\"\n  };\n  const datosExtraidosArray = Object.values(datosExtraidos);\n  const datosExtraidosConSeparador = {};\n  let counter2 = 1;\n  for (let i = 0; i < datosExtraidosArray.length; i++) {\n    datosExtraidosConSeparador[counter2++] = datosExtraidosArray[i];\n\n    if (i < datosExtraidosArray.length - 1 && datosExtraidosArray[i].batch !== datosExtraidosArray[i + 1].batch) {\n      datosExtraidosConSeparador[counter2++] = separador;\n    }\n  }\n  console.log(`Datos extraidos con separador: `);\n  console.log(datosExtraidosConSeparador)\n\n  // Llenar lo demas\n  llenarTabla(workbook, datosExtraidosConSeparador, totalFilas);\n\n}\n\nfunction llenarTabla(workbook: ExcelScript.Workbook, datosExtraidos: { [counter: number]: { article: string, reqWeight: string, actualWeight: string, batch: string, description?: string } }, totalFilasOrigen: number) {\n  // Obtén una referencia a la hoja donde deseas escribir los datos\n  let hojaDestino = workbook.getWorksheet('DATOS');\n\n  // Obtener la tabla con formato\n  let tablaPequenia = hojaDestino.getTable('Datos');\n\n  // Verificar que la tabla existe\n  if (!tablaPequenia) {\n    console.log(\"No se encontró la tabla con el nombre 'Datos'.\");\n    return;\n  }\n\n  // Obtener los datos de la tabla\n  let rangoTabla = tablaPequenia.getRangeBetweenHeaderAndTotal();\n  let datosTabla = rangoTabla.getValues();\n\n  // Quitar el cero de batch\n  for (let i = 0; i < datosTabla.length; i++) {\n    datosTabla[i][0] = String(datosTabla[i][0]).substring(1);\n  }\n\n  let totalFilas = tablaPequenia.getRowCount();\n  let columnaInicioH = 8;\n  let filaInicioH = 9;\n  let batch: string;\n  let totalQTY: string;\n\n  // Define la fila y la columna de inicio donde escribir los datos\n  let filaInicio = 11; // Cambia este valor según sea necesario\n  let columnaInicio = 6; // Cambia este valor según sea necesario\n\n  // Recorrer los datos de la tabla\n  for (let i = 0; i < datosTabla.length && i <= totalFilas; i++) {\n\n    // Poner en Tabla Datos2\n    batch = String(datosTabla[i][0]);\n    totalQTY = String(datosTabla[i][1]);\n    datosTabla[i].push(columnaInicioH);\n\n    // addColumn(columnaInicioH, \"Description\")\n\n    hojaDestino.getCell(filaInicioH, columnaInicioH).setValue(batch);\n    hojaDestino.getCell(filaInicioH, columnaInicioH + 1).setValue(totalQTY);\n\n    columnaInicioH += 5;\n  }\n\n  console.log(`Datos header:`);\n  console.log(datosTabla);\n\n  // Recorre el objeto datosExtraidos y escribe datos en la tabla\n  // let datosPrimeraOrfa = {};\n  // let filaFinalPrimerosDatos = 0;\n\n  // Agregar primeros datos\n  // for (let indice in datosExtraidos) {\n  //   if (datosExtraidos[indice].article == \"OtraOrfa\") {\n  //     filaFinalPrimerosDatos = Number(indice);\n  //     break\n  //     // dataWriter(workbook, datosExtraidos, filaInicio, datosTabla, hojaDestino, (Number(indice) + 1));\n  //   }\n\n  //   let originalDescription = datosExtraidos[indice].description;\n  //   let article = datosExtraidos[indice].article;\n\n  //   // Crea una copia del objeto actual\n  //   let objCopy = Object.assign({}, datosExtraidos[indice]);\n\n  //   // Agrega el índice como atributo al objeto copiado\n  //   objCopy['indice'] = filaInicio;\n  //   objCopy['fila'] = filaFinalPrimerosDatos;\n\n  //   // Asigna el objeto copiado a una nueva propiedad en datosPrimeraOrfa\n  //   datosPrimeraOrfa[indice] = objCopy;\n\n  //   // Escribe los datos en las celdas de la hoja destino\n  //   hojaDestino.getCell(filaInicio, columnaInicio).setValue(article);\n\n  //   // Busca en el diccionario\n  //   let description = dictionary(workbook, article);\n  //   if (description == undefined) {\n  //     description = \"No se encontró en el diccionario\" + \",\" + originalDescription;\n  //   }\n  //   hojaDestino.getCell(filaInicio, columnaInicio + 1).setValue(description);\n  //   filaInicio = filaInicio + 1;\n  // }\n\n  // console.log(`Primera Orfa: `);\n  // console.log(datosPrimeraOrfa)\n\n  // Agregar datos numericos\n  let indiceAnterior = 0;\n  let longitud = Object.keys(datosExtraidos).length;\n  for (let indice in datosExtraidos) {\n    if (datosExtraidos[indice].article == \"OtraOrfa\") {\n      dataWriter(workbook, datosExtraidos, datosTabla, hojaDestino, indiceAnterior, (Number(indice) - 1));\n      indiceAnterior = Number(indice);\n    }\n    else if (datosExtraidos[indice].article != \"OtraOrfa\" && Number(indice) == longitud) {\n      dataWriter(workbook, datosExtraidos, datosTabla, hojaDestino, indiceAnterior, Number(indice));\n    }\n  }\n}\n\n\nfunction dictionary(workbook: ExcelScript.Workbook, article: string) {\n  // Obtener la hoja\n  let hoja = workbook.getWorksheet('Diccionario'); // Se pone un nombre arbitrario\n\n  // Se especifica la columna \n  let columna = \"A\";\n  let materialDescription = \"B\";\n\n  // Obtener el rango utilizado en la hoja de cálculo\n  let rangoUsado = hoja.getUsedRange();\n\n  // Obtener el número total de filas en el rango utilizado\n  let totalFilas = rangoUsado.getRowCount();\n\n  // Rango dinámico desde la primera celda (A1) hasta la última fila en el rango utilizado\n  let rangoDinamico = hoja.getRange(`${columna}2:${columna}${totalFilas}`);\n  let rangoDinamicoMaterialDescription = hoja.getRange(`${materialDescription}2:${materialDescription}${totalFilas}`);\n\n  // Leer los datos en el rango dinámico\n  let datos = rangoDinamico.getValues();\n  let datosMaterialDescription = rangoDinamicoMaterialDescription.getValues();\n\n  for (let i = 0; i < totalFilas - 1; i++) {\n    let material = String(datos[i][0]);\n    let description = String(datosMaterialDescription[i][0]);\n    if (article == material) {\n\n      return description;\n    }\n\n  }\n\n}\n\nfunction dataWriter(workbook: ExcelScript.Workbook, datosExtraidos: { [counter: number]: { article: string, reqWeight: string, actualWeight: string, batch: string, description?: string } }, datosTabla: (string | number | boolean)[][], hojaDestino: ExcelScript.Worksheet, inicioAnterior: number, inicioIndice: number) {\n  // Agregar datos restantes\n  let keys = Object.keys(datosExtraidos); // Obtén las llaves del objeto\n  let filaInicio = 11;\n\n  // Comenzamos desde el indice indicado\n  for (let i = inicioAnterior; i < inicioIndice; i++) {\n    let indice = keys[i];\n    let reqWeight: string = datosExtraidos[indice].reqWeight;\n    let actualWeight: string = datosExtraidos[indice].actualWeight;\n    let batchSAP: string = datosExtraidos[indice].batch;\n    let article: string = datosExtraidos[indice].article;\n    let descripcionOriginal: string = datosExtraidos[indice].description;\n\n    // console.log(`BatchSAP: ${batchSAP}, reqWeight: ${reqWeight}, actualweight: ${actualWeight}`);\n\n    let columna: string = \"\";\n    let total_qty: string;\n\n    // Data header Finder\n    for (let i = 0; i < datosTabla.length; i++) {\n      if (batchSAP == datosTabla[i][0]) {\n        columna = String(datosTabla[i][3]);\n        total_qty = String(datosTabla[i][1]);\n      }\n    }\n    // console.log(`Columna: ${columna}`);\n    // console.log(`REQ Weigth - ${reqWeight}`);\n    if (reqWeight.length <= 5) {\n      reqWeight = reqWeight.replace(',', '.');\n    }\n    else if (reqWeight.length <= 7) {\n      reqWeight = reqWeight.replace(',', '.');\n    }\n    else if (reqWeight.length <= 8) {\n      reqWeight = reqWeight.replace(',', '');\n    }\n    else {\n      reqWeight = reqWeight.replace(',', '.');\n    }\n    if (actualWeight.length <= 5) {\n      actualWeight = actualWeight.replace(',', '.');\n    }\n    else if (actualWeight.length <= 7) {\n      actualWeight = actualWeight.replace(',', '.');\n    }\n    else if (actualWeight.length <= 8) {\n      actualWeight = actualWeight.replace(',', '');\n    }\n    else {\n      actualWeight = actualWeight.replace(',', '.');\n    }\n    // console.log(`REQ Weigth Convertido - ${reqWeight}`);\n    // Escribir datos\n    let regla3 = (parseFloat(reqWeight) * 100) / parseFloat(total_qty);\n\n    // Buscar en diccionario\n    let description = dictionary(workbook, article);\n    if (description == undefined) {\n      description = \"No se encontró en el diccionario\" + \",\" + descripcionOriginal;\n    }\n    hojaDestino.getCell(filaInicio, parseInt(columna) - 2).setValue(article);\n    hojaDestino.getCell(filaInicio, parseInt(columna) - 1).setValue(description);\n\n    hojaDestino.getCell(filaInicio, parseInt(columna)).setValue(regla3);\n    hojaDestino.getCell(filaInicio, parseInt(columna) + 1).setValue(parseFloat(reqWeight));\n    hojaDestino.getCell(filaInicio, parseInt(columna) + 2).setValue(parseFloat(actualWeight));\n\n    filaInicio++;\n  }\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}